{"version":3,"sources":["components/img/joey.gif","components/img/teacher.gif","components/img/minions.gif","components/img/jeremy.gif","components/Home.js","components/Utils.js","components/Create.js","components/Join.js","components/Play.js","components/JoinSuccess.js","components/Play_User.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","history","className","Button","variant","onClick","push","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","shuffle","array","i","length","j","Math","floor","random","useState","bg","setBg","pin_code","setPin_Code","participants","setParticipants","a","fetch","response","json","data","pincode","fetchData","getParticipants","method","body","JSON","stringify","headers","start","pathname","state","colors","style","background","map","person","pinCode","setPinCode","playername","setPlayername","invalidPin","setInvalidPin","onSubmit","result","Form","Group","controlId","Label","Control","onChange","e","target","value","type","placeholder","Play","location","useLocation","timerBeforeQ","setTimerBeforeQ","timerAfterQ","setTimerAfterQ","local_data","setLocalData","count","setCount","show","setShow","Q","setQ","didAnswer","setDidAnswer","score","setScore","choice1","setChoice1","choice2","setChoice2","choice3","setChoice3","choice4","setChoice4","thumbs_up","joey","jeremy","minions","teacher","currentTimer","setTimeout","timer","item","entry","question","answers","correct_ans","nextQuestion","oldv","onAnswer","ans","right_ans","src","alt","Row","color","fontSize","games","includes","setTimer","Main","exact","path","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79ffae89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/joey.3b4e5c2e.gif\";","module.exports = __webpack_public_path__ + \"static/media/teacher.2e35d32a.gif\";","module.exports = __webpack_public_path__ + \"static/media/minions.90c33c0b.gif\";","module.exports = __webpack_public_path__ + \"static/media/jeremy.e6c35d31.gif\";","import React, {useState} from 'react';\nimport { withRouter } from \"react-router-dom\";\nimport './css/home.css';\nimport Button from 'react-bootstrap/Button';\n\n\nexport default withRouter(function Home(props){\n  const {history} = props;\n\n    return(\n      <div className=\"homepage-wrapper\">\n          <Button className=\"btn-home\" variant=\"success\" onClick={() => {history.push('/create')}} >Create Game</Button>\n          <Button className=\"btn-home\" onClick={() => {history.push('/join')}}>Join Game</Button>\n      </div>\n        )\n});\n\n","import {useEffect, useRef, createContext} from \"react\";\n\n\nexport const Store = {};\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n      let id;\n    function tick() {\n        if(savedCallback.current() === false){\n            clearInterval(id);\n        }\n        savedCallback.current();\n    }\n    if (delay !== null) {\n      id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function shuffle(array){\n      for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n}\n\nexport function changeBgColor(){\n      const colors = [\"#ed8b06\", \"#2212ab\", \"#2bce79\", \"#9d15a9\"];\n      shuffle(colors);\n      return colors[0];\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport {withRouter} from \"react-router-dom\";\nimport './css/create.css';\nimport {useInterval, shuffle} from \"./Utils\";\n\nexport default withRouter(function Create(props){\n    const {history} = props;\n    const [bg,setBg] = useState(\"#282c34\");\n    const [pin_code,setPin_Code] = useState(\"\");\n    const [participants, setParticipants] = useState([]);\n\n    useEffect( () => {\n        async function fetchData() {\n            const response = await fetch('http://127.0.0.1:8000/create');\n            const data = await response.json();\n            setPin_Code(data.pincode);\n        }\n        fetchData();\n        }, []);\n\n    const getParticipants = async () =>{\n         if(pin_code.length === 0) return;\n         const response = await fetch('http://127.0.0.1:8000/participants/', {\n                method: \"POST\",\n                body: JSON.stringify({'pin_code': pin_code}),\n                headers: {\n                    'content-type': 'application/json'\n                }\n         });\n          const data = await response.json();\n          setParticipants([...data.participants]);\n    };\n\n    const start = async () =>{\n        const response = await fetch('http://127.0.0.1:8000/games/', {\n                method: \"POST\",\n                body: JSON.stringify({'pin_code': pin_code}),\n                headers: {\n                    'content-type': 'application/json'\n                }\n         });\n        history.push({\n           pathname: '/play',\n           state: { participants: participants}\n       });\n    };\n\n    const changeBgColor = () => {\n      const colors = [\"#ed8b06\", \"#2212ab\", \"#2bce79\", \"#9d15a9\"];\n      shuffle(colors);\n      setBg(colors[0]);\n    };\n    useInterval(getParticipants, 2000);\n    useInterval(changeBgColor, 3000);\n    \n    return(\n    <div className=\"createpage-wrapper\" style={{background: bg}}>\n        <h2>Enter pincode to Join Game</h2>\n        <h3>{pin_code}</h3>\n        <Button className=\"start-btn\" onClick={start} variant=\"dark\">START</Button>\n        <div className=\"temp-wrapper\">\n            <ul>\n                {participants.map(person =>{\n                    return <li>{person}</li>\n                })}\n            </ul>\n        </div>\n    </div>)\n});\n\n\n\n","import React, {useState} from 'react';\nimport {Link, withRouter} from \"react-router-dom\";\nimport './css/join.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\n\nexport default withRouter(function Join(props){\n    const {history} = props;\n    const [pinCode,setPinCode] = useState(null);\n    const [playername, setPlayername] = useState(\"\");\n    const [invalidPin,setInvalidPin] = useState(\"\");\n\n    const onSubmit = async () => {\n      setInvalidPin(\"\");\n      const response = await fetch('http://127.0.0.1:8000/join/', {\n        method: \"POST\",\n        body: JSON.stringify({'pin_code': pinCode, \"name\": playername}),\n        headers: {\n            'content-type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if(data.result){\n        history.push({\n           pathname: '/success',\n           state: { pincode: pinCode, playername:playername, }\n       });\n      }\n      else{\n          setInvalidPin(\"Invalid pincode try again...\")\n      }\n    };\n\n    return(\n        <div className=\"joinpage-wrapper\">\n            <Form>\n                <Form.Group controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>PINCODE</Form.Label>\n                    <Form.Control onChange={(e) =>{setPinCode(e.target.value)}} type=\"text\" placeholder=\"ex. 12Df5J\" />\n                    <Form.Label>NICKNAME</Form.Label>\n                    <Form.Control onChange={(e) =>{setPlayername(e.target.value)}} type=\"text\" placeholder=\"Joe\" />\n                    <Button className=\"joinbtn\" onClick={onSubmit}>JOIN</Button>\n                    <p>{invalidPin}</p>\n                </Form.Group>\n            </Form>\n        </div>\n    )\n});\n\n","import React, {useState, useEffect} from 'react';\nimport {withRouter, useLocation} from \"react-router-dom\";\nimport {shuffle} from \"./Utils\";\nimport './css/play.css';\nimport Button from 'react-bootstrap/Button';\nimport Row from \"react-bootstrap/Row\";\n\nimport joey from \"./img/joey.gif\";\nimport teacher from \"./img/teacher.gif\";\nimport minions from \"./img/minions.gif\";\nimport jeremy from \"./img/jeremy.gif\";\n\n\nconst Play = (props) =>{\n    const location = useLocation();\n    const [timerBeforeQ,setTimerBeforeQ] = useState(0);\n    const [timerAfterQ,setTimerAfterQ] = useState(25);\n    const [local_data,setLocalData] = useState([]);\n    const [count,setCount] = useState(0);\n    const[show,setShow] = useState(false);\n    const [Q,setQ] = useState(\"\");\n    const [didAnswer,setDidAnswer] = useState(false);\n    // const [ans,setAns] = useState(\"\");\n    let [score,setScore] = useState(0);\n    const [choice1,setChoice1] = useState(\"\");\n    const [choice2,setChoice2] = useState(\"\");\n    const [choice3,setChoice3] = useState(\"\");\n    const [choice4,setChoice4] = useState(\"\");\n\n    const thumbs_up = [joey, jeremy, minions, teacher];\n    shuffle(thumbs_up);\n\n    // STARTING TIMER 5 SECONDS\n    useEffect(()=>{\n        setDidAnswer(false);\n       if(timerBeforeQ === 0) return;\n       const currentTimer = timerBeforeQ;\n\n       setTimeout(()=>{\n           if(timerBeforeQ !== currentTimer) return;\n           setTimerBeforeQ(currentTimer - 1);\n       },1000)\n    },[timerBeforeQ]);\n\n    // TIMER FOR ANSWERING WINDOW\n    useEffect(() => {\n            if (timerAfterQ === 0) return;\n            const timer = timerAfterQ;\n            setTimeout(() => {\n                if (timerAfterQ !== timer) return;\n                setTimerAfterQ(timer - 1);\n            }, 1000)\n        }, [timerAfterQ]);\n\n    // GET QUIZ FROM DB\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch('http://127.0.0.1:8000/quiz');\n            const data = await response.json();\n\n            for(const item in data){\n                local_data.push({\n                    entry:{\n                        \"qnum\":item,\n                        \"question\": data[item].question,\n                        \"answers\": data[item].answers,\n                        \"right_ans\":data[item].correct_ans,\n                    }\n                });\n            }\n            setLocalData([...local_data]);\n            nextQuestion();\n        }\n        fetchData();\n    }, []);\n\n    // SHOW QUESTIONS\n    const nextQuestion = () =>{\n        setShow(()=>{\n            setTimeout(() =>{\n                setShow(true);\n                },5000);\n            return false;\n        });\n        setCount(oldv => oldv + 1);\n        setQ(local_data[count].entry.question);\n        setChoice1(local_data[count].entry.answers[0]);\n        setChoice2(local_data[count].entry.answers[1]);\n        setChoice3(local_data[count].entry.answers[2]);\n        setChoice4(local_data[count].entry.answers[3]);\n        setTimerBeforeQ(5);\n        setTimerAfterQ(25);\n    };\n\n    // GET WHO ANSWERED AND WHAT\n    // const onAnswer = question => async () =>{\n    //     if(didAnswer) return;\n    //     setDidAnswer(true);\n    //     console.log(question);\n    //     const response = await fetch('http://127.0.0.1:8000/onanswer/', {\n    //     method: \"POST\",\n    //     body: JSON.stringify({answer:question, playername: location.state.playername, q_num:count - 1, pin_code: location.state.pincode}),\n    //     headers: {\n    //         'content-type': 'application/json'\n    //     }\n    //   });\n    // };\n\n    const onAnswer = async (ans) =>{\n      //   const response = await fetch('http://127.0.0.1:8000/onanswer/', {\n      //   method: \"POST\",\n      //   body: JSON.stringify({answer:ans, playername: location.state.playername, q_num:count - 1, pin_code: location.state.pincode}),\n      //   headers: {\n      //       'content-type': 'application/json'\n      //   }\n      // });\n        if(ans === local_data[count - 1].entry.right_ans) {\n            setScore(score += (timerAfterQ * 10));\n        }\n        setDidAnswer(true);\n        setShow(false);\n    };\n\n    return(\n        <div className=\"playpage-wrapper\">\n            {!didAnswer && (<h2>{Q}</h2>)}\n            {didAnswer && (<img src={thumbs_up[0]} alt=\"thumbs up\"/>)}\n            {timerBeforeQ > 0 && (<h1 className=\"timer-before-question-bigscr\">{timerBeforeQ}</h1>)}\n            <Row>\n                {show && (<Button onClick={() => {onAnswer(choice1)}} style={{color:\"white\", fontSize:40 +\"px\"}} className=\"answer-btn\" variant=\"danger\">{choice1}</Button>)}\n                {show && (<Button onClick={() => {onAnswer(choice2)}} style={{color:\"white\", fontSize:40 +\"px\"}} className=\"answer-btn\" variant=\"success\">{choice2}</Button>)}\n            </Row>\n            <Row>\n                {show && (<Button onClick={() => {onAnswer(choice3)}} style={{color:\"white\", fontSize:40 +\"px\"}} className=\"answer-btn\" variant=\"primary\">{choice3}</Button>)}\n                {show && (<Button onClick={() => {onAnswer(choice4)}} style={{color:\"white\", fontSize:40 +\"px\"}} className=\"answer-btn\" variant=\"warning\">{choice4}</Button>)}\n            </Row>\n                {timerAfterQ === 0 && count < local_data.length &&(nextQuestion())}\n                {(show || didAnswer) && (<p className=\"timer-after-question-bigscr\">{timerAfterQ}</p>)}\n                <p className=\"playername\">{location.state.playername}</p>\n                <p className=\"score\">{score}</p>\n        </div>\n    )\n};\n\nexport default Play;","import React, {useState} from 'react';\nimport {withRouter, useLocation} from \"react-router-dom\";\nimport \"./css/join.css\";\nimport {Store,useInterval} from \"./Utils\";\n\n\nexport default withRouter(function JoinSuccess(props) {\n    const {history} = props;\n    const location = useLocation();\n\n    async function canPlay() {\n            const response = await fetch('http://127.0.0.1:8000/games');\n            const data = await response.json();\n        if(data.games.includes(location.state.pincode)){\n            history.push({\n           pathname: '/play',\n           state: { pincode: location.state.pincode, playername:location.state.playername }\n       });\n        }\n    }\n\n    useInterval(canPlay,100);\n\n    return(<div className=\"joinsuccess-wrapper\">\n            <h1>{location.state.playername} you are IN!!!!</h1>\n\n    </div>)\n})","import React, {useState, useEffect} from 'react';\nimport {withRouter, useLocation} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport \"./css/onplay.css\";\n\n\nexport default withRouter(function PlayUser(props){\n    const { history } = props;\n    const location = useLocation();\n\n    const [timer,setTimer] = useState(0);\n    const [timerAfterQ,setTimerAfterQ] = useState(25);\n    const [score,setScore] = useState(0);\n    const[show,setShow] = useState(false);\n\n\n    useEffect(()=>{\n       if(timer === 0) return;\n       const currentTimer = timer;\n       setTimeout(()=>{\n           if(timer !== currentTimer) return;\n           setTimer(currentTimer - 1);\n       },1000)\n    },[timer]);\n    useEffect(()=>{\n        setTimer(5);\n    },[]);\n    return(<>\n        <div className=\"onplaypage-wrapper\">\n                {timer > 0 &&(<h1 className=\"timer-before-question\">{timer}</h1>)}\n                {timer === 0 &&(<span>GAME ID: {location.state.pincode}</span>)}\n            <Row>\n                {timer === 0 &&(<Button className=\"btn-answer\" variant=\"danger\"></Button>)}\n                {timer === 0 &&(<Button className=\"btn-answer\" variant=\"success\"></Button>)}\n            </Row>\n            <Row>\n                {timer === 0 &&(<Button className=\"btn-answer\" variant=\"primary\"></Button>)}\n                {timer === 0 &&(<Button className=\"btn-answer\" variant=\"warning\"></Button>)}\n            </Row>\n                {timer === 0 &&(<span className=\"nickname\">{location.state.playername}</span>)}\n                {timer === 0 &&(<span>SCORE: {score}</span>)}\n       </div>\n\n        </>\n    )\n});\n\n","import React from 'react';\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Create from \"./Create\";\nimport Join from \"./Join\";\nimport Play from \"./Play\";\nimport JoinSuccess from \"./JoinSuccess\";\nimport PlayUser from \"./Play_User\";\n\nconst Main = () =>{\nreturn(<Router>\n          <Route exact path=\"/\">\n            <Home/>\n          </Route>\n          <Route path=\"/create\">\n            <Create/>\n          </Route>\n          <Route path=\"/join\">\n            <Join/>\n          </Route>\n          <Route path=\"/play\">\n            <Play/>\n          </Route>\n          <Route path=\"/success\">\n            <JoinSuccess/>\n          </Route>\n          <Route path=\"/onplay\">\n            <PlayUser/>\n          </Route>\n        </Router>)};\n\nexport default Main","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n          <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}